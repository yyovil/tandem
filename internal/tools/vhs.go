package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"time"
)

const (
	VhsToolName = "vhs"
)

type VhsParams struct {
	Script     string `json:"script" description:"The VHS tape script content to execute"`
	OutputPath string `json:"output_path" description:"Path where the generated GIF should be saved (optional, defaults to ./demo.gif)"`
	Width      int    `json:"width" description:"Width of the terminal in characters (optional, defaults to 1200)"`
	Height     int    `json:"height" description:"Height of the terminal in characters (optional, defaults to 600)"`
}

type VhsTool struct{}

func (v *VhsTool) Info() ToolInfo {
	return ToolInfo{
		Name:        VhsToolName,
		Description: "Generate terminal recordings as GIFs using VHS (Video Hyper Scripts). Creates .tape files and executes them to produce demonstration videos of CLI interactions.",
		Parameters: map[string]any{
			"type": "object",
			"properties": map[string]any{
				"script": map[string]any{
					"type":        "string",
					"description": "The VHS tape script content to execute. Should include commands like 'Type', 'Sleep', 'Enter', etc.",
				},
				"output_path": map[string]any{
					"type":        "string",
					"description": "Path where the generated GIF should be saved (optional, defaults to ./demo.gif)",
				},
				"width": map[string]any{
					"type":        "integer",
					"description": "Width of the terminal in characters (optional, defaults to 1200)",
				},
				"height": map[string]any{
					"type":        "integer",
					"description": "Height of the terminal in characters (optional, defaults to 600)",
				},
			},
			"required": []string{"script"},
		},
		Required: []string{"script"},
	}
}

func (v *VhsTool) Run(ctx context.Context, params ToolCall) (ToolResponse, error) {
	var vhsParams VhsParams
	if err := json.Unmarshal([]byte(params.Input), &vhsParams); err != nil {
		return NewTextErrorResponse(fmt.Sprintf("Invalid parameters: %v", err)), nil
	}

	if vhsParams.Script == "" {
		return NewTextErrorResponse("Script content is required"), nil
	}

	// Set defaults
	if vhsParams.OutputPath == "" {
		vhsParams.OutputPath = "./demo.gif"
	}
	if vhsParams.Width == 0 {
		vhsParams.Width = 1200
	}
	if vhsParams.Height == 0 {
		vhsParams.Height = 600
	}

	// Check if VHS is installed
	if err := checkVhsInstalled(); err != nil {
		return NewTextErrorResponse(fmt.Sprintf("VHS is not installed: %v", err)), nil
	}

	// Create temporary .tape file
	tapeFile, err := v.createTapeFile(vhsParams)
	if err != nil {
		return NewTextErrorResponse(fmt.Sprintf("Failed to create tape file: %v", err)), nil
	}
	defer os.Remove(tapeFile)

	// Execute VHS
	output, err := v.executeVhs(ctx, tapeFile)
	if err != nil {
		return NewTextErrorResponse(fmt.Sprintf("Failed to execute VHS: %v\nOutput: %s", err, output)), nil
	}

	// Verify output file was created
	if _, err := os.Stat(vhsParams.OutputPath); os.IsNotExist(err) {
		return NewTextErrorResponse(fmt.Sprintf("Output file was not created: %s", vhsParams.OutputPath)), nil
	}

	return NewTextResponse(fmt.Sprintf("VHS recording successfully generated: %s\nTape script used:\n%s", vhsParams.OutputPath, vhsParams.Script)), nil
}

func (v *VhsTool) createTapeFile(params VhsParams) (string, error) {
	// Create a temporary file with .tape extension
	timestamp := time.Now().Format("20060102_150405")
	tapeFile := fmt.Sprintf("/tmp/vhs_demo_%s.tape", timestamp)

	// Build the complete tape script with settings
	tapeContent := fmt.Sprintf(`# VHS tape generated by Tandem VHS Agent
Output %s
Set Width %d
Set Height %d
Set Shell "bash"
Set Theme "Catppuccin Frappe"

%s
`, params.OutputPath, params.Width, params.Height, params.Script)

	if err := os.WriteFile(tapeFile, []byte(tapeContent), 0644); err != nil {
		return "", fmt.Errorf("failed to write tape file: %w", err)
	}

	return tapeFile, nil
}

func (v *VhsTool) executeVhs(ctx context.Context, tapeFile string) (string, error) {
	cmd := exec.CommandContext(ctx, "vhs", tapeFile)
	
	// Set environment variables for headless execution
	cmd.Env = append(os.Environ(), 
		"DISPLAY=:99",
		"TERM=xterm-256color",
	)

	output, err := cmd.CombinedOutput()
	if err != nil {
		return string(output), fmt.Errorf("vhs command failed: %w", err)
	}

	return string(output), nil
}

func checkVhsInstalled() error {
	cmd := exec.Command("vhs", "--version")
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("vhs command not found. Please install VHS from https://github.com/charmbracelet/vhs")
	}
	return nil
}

// NewVhsTool creates a new VHS tool instance
func NewVhsTool() BaseTool {
	return &VhsTool{}
}