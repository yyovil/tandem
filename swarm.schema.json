{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Swarm Configuration Schema for Tandem",
  "description": "JSON schema for declarative swarm configuration in Tandem",
  "type": "object",
  "properties": {
    "$schema": {
      "description": "The schema to verify this agents configuration against",
      "type": "string",
      "format": "uri-reference"
    },
    "RoE": {
      "default": ".tandem/RoE.md",
      "description": "Context path of the file stating the rules of engagement",
      "type": "string"
    },
    "data": {
      "type": "object",
      "description": "Directories where all the data generated during the engagement will be stored by the swarm.",
      "properties": {
        "bindMount": {
          "description": "Bind mount path for the swarm's container. By default, current working directory.",
          "type": "string"
        },
        "directory": {
          "description": "Directory where all the application data will be stored",
          "type": "string"
        }
      }
    },
    "agents": {
      "type": "object",
      "description": "ai agents working in tandem.",
      "properties": {
        "orchestrator": {
          "allOf": [
            {
              "$ref": "#/definitions/Agent"
            }
          ],
          "title": "Orchestrator (your only point of contact)",
          "description": "Interprets and assigns the penetration testing tasks to subagents with respective expertise."
        },
        "reporter": {
          "allOf": [
            {
              "$ref": "#/definitions/Agent"
            }
          ],
          "title": "reporter",
          "description": "Manages project timeline, resources, and deliverables"
        },
        "reconnoiter": {
          "allOf": [
            {
              "$ref": "#/definitions/Agent"
            }
          ],
          "title": "Reconnoiter",
          "description": "Performs reconnaissance and information gathering"
        },
        "exploiter": {
          "allOf": [
            {
              "$ref": "#/definitions/Agent"
            }
          ],
          "title": "Exploiter",
          "description": "Executes exploitation attempts on discovered vulnerabilities"
        },
        "vulnerability_scanner": {
          "allOf": [
            {
              "$ref": "#/definitions/Agent"
            }
          ],
          "title": "vulnerability scanner",
          "description": "Identifies and assesses security vulnerabilities"
        },
        "summarizer": {
          "allOf": [
            {
              "$ref": "#/definitions/Agent"
            }
          ],
          "title": "Summarizer",
          "description": "summarizes the whole session succintly to provide the context till a point during the engagement to continue based on the current findings."
        },
        "title": {
          "allOf": [
            {
              "$ref": "#/definitions/Agent"
            }
          ],
          "title": "Title",
          "description": "generates a title for a session based on the first message within a session."
        }
      }
    },
    "providers": {
      "propertyNames": {
        "enum": [
          "anthropic",
          "openai",
          "gemini",
          "groq",
          "openrouter",
          "vertexai",
          "copilot",
          "xai"
        ]
      },
      "additionalProperties": {
        "description": "Provider configuration",
        "properties": {
          "apiKey": {
            "description": "API key for the provider",
            "type": "string"
          },
          "disabled": {
            "default": false,
            "description": "Whether the provider is disabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "description": "LLM provider configurations",
      "type": "object"
    },
    "debug": {
      "default": false,
      "description": "Enable debug mode for tandem. find the debug.log in the .tandem dir.",
      "type": "boolean"
    }
  },
  "required": [
    "providers",
    "agents"
  ],
  "additionalProperties": false,
  "definitions": {
    "Agent": {
      "type": "object",
      "properties": {
        "agentId": {
          "type": "string",
          "description": "Unique identifier for the agent"
        },
        "name": {
          "type": "string",
          "description": "Human-readable name for the agent"
        },
        "description": {
          "type": "string",
          "description": "Description of the agent's purpose and capabilities"
        },
        "goal": {
          "type": "string",
          "description": "Primary goal or objective of the agent"
        },
        "model": {
          "type": "string",
          "description": "The AI model to use for this agent",
          "enum": [
            "gpt-4.1",
            "gpt-4o",
            "gpt-4o-mini",
            "gpt-4.1-mini",
            "gpt-4.5-preview",
            "gpt-4.1-nano",
            "o1",
            "o1-mini",
            "o1-pro",
            "o3",
            "o3-mini",
            "o4-mini",
            "claude-3-opus",
            "claude-3.5-haiku",
            "claude-3-haiku",
            "claude-4-sonnet",
            "claude-3.5-sonnet",
            "claude-3.7-sonnet",
            "claude-4-opus",
            "llama-3.3-70b-versatile",
            "meta-llama/llama-4-maverick-17b-128e-instruct",
            "meta-llama/llama-4-scout-17b-16e-instruct",
            "deepseek-r1-distill-llama-70b",
            "moonshotai/kimi-k2-instruct",
            "qwen-qwq",
            "gemini-2.0-flash-lite",
            "gemini-2.0-flash",
            "gemini-2.5-pro",
            "gemini-2.5-flash",
            "gemini-2.5-flash-lite",
            "vertexai.gemini-2.5-flash",
            "vertexai.gemini-2.5-pro",
            "vertexai.gemini-2.5-flash-lite",
            "grok-3-beta",
            "grok-3-mini-fast-beta",
            "grok-3-fast-beta",
            "grok-3-mini-beta",
            "copilot.gpt-4o",
            "copilot.gpt-4o-mini",
            "copilot.gpt-4.1",
            "copilot.claude-3.5-sonnet",
            "copilot.claude-3.7-sonnet",
            "copilot.claude-sonnet-4",
            "copilot.o1",
            "copilot.o3-mini",
            "copilot.o4-mini",
            "copilot.gemini-2.0-flash",
            "copilot.gemini-2.5-pro"
          ]
        },
        "maxTokens": {
          "type": "integer",
          "description": "Maximum number of tokens for the agent",
          "minimum": 1
        },
        "reasoningEffort": {
          "type": "string",
          "description": "Reasoning effort level for models that support it",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "instructions": {
          "type": "array",
          "description": "Array of instruction strings that define the agent's behavior",
          "items": {
            "type": "string"
          }
        },
        "tools": {
          "type": "array",
          "description": "Array of tools available to the agent",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Tool"
          }
        }
      },
      "required": [
        "agentId",
        "goal",
        "description",
        "instructions"
      ],
      "additionalProperties": false,
      "reasoningEffort": {
        "description": "Reasoning effort for models that support it (OpenAI, Anthropic)",
        "enum": [
          "low",
          "medium",
          "high"
        ],
        "type": "string"
      }
    },
    "Tool": {
      "type": "string",
      "description": "Tool definition for agent capabilities",
      "enum": [
        "terminal",
        "subagent"
      ]
    }
  }
}